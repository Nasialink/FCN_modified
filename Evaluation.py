# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gu34cLf32yI-MZheiR6386rUU3-vjh8z
"""

import os
import tensorflow
import keras
import math
import matplotlib.pyplot as plt
import zipfile  # For faster extraction
import SimpleITK as sitk  # For loading the dataset
import numpy as np  # For data manipulation
import model
from model import loss_gt
import group_norm
import glob  # For populating the list of files
from scipy.ndimage import zoom  # For resizing
import re  # For parsing the filenames (to know their modality)
#import example_on_brats2018 #import resize #,read_img, preprocess, preprocess_label
from functions import *
import nibabel as nib


def predict_gt(model, input_data):
    # Set the VAE branch's output layer to None
    model.get_layer('Dec_VAE_Output').outbound_nodes = None

    # Predict using the modified model
    predictions = model.predict(input_data)

    # Return only the predictions from the GT branch
    gt_predictions = predictions[0]

    return gt_predictions

data_path = '/media/lele/D/athena/nasia_dissertation/BRATS/data/MICCAI_BraTS_2018_Data_Training'
path_checkpoint = '/media/lele/D/athena/nasia_dissertation/BRATS/data/training/cp.ckpt'
save_pred_path = '/media/lele/D/athena/nasia_dissertation/BRATS/data/predictions'
save_model_path = '/media/lele/D/athena/nasia_dissertation/BRATS/data/saved_model/mymodel.keras'

"""data_path = '/content/gdrive/MyDrive/Diplomatiki_new/brats/data.nii.gz'
labels_path = '/content/gdrive/MyDrive/Diplomatiki_new/brats/labels.nii.gz'
path_checkpoint = '/content/gdrive/MyDrive/Diplomatiki_new/brats/training/cp.ckpt'
save_pred_path = '/content/gdrive/MyDrive/Diplomatiki_new/brats/predictions'
save_model_path = '/content/gdrive/MyDrive/Diplomatiki_new/brats/saved_model/mymodel.keras'"""

index_path= save_pred_path + '/test_ind.npy'
#count = 5

data = nib.load(data_path)
labels = nib.load(labels_path)
np_data = data.get_fdata()
np_labels = labels.get_fdata()

test_ind=np.load(index_path)
test = np_data[test_ind,:,:,:,:]
labels_te= np_labels[test_ind,:,:,:,:]

model_v = keras.models.load_model(save_model_path, compile=False)   # solution from https://stackoverflow.com/questions/48373845/loading-model-with-custom-loss-keras

y_pred= predict_gt(model_v, test)
print(type(y_pred), y_pred.shape)
np.save(os.path.join(save_pred_path, 'y_pred.npy'), y_pred)
